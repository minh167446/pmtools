"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular-devkit/core");
var build_webpack_1 = require("@angular-devkit/build-webpack");
var normalize_1 = require("../../utils/normalize");
var devserver_config_1 = require("../../utils/webpack/devserver.config");
var operators_1 = require("rxjs/operators");
var fs_1 = require("fs");
var opn = require("opn");
var url = require("url");
var path_1 = require("path");
var serve_path_1 = require("../../utils/serve-path");
var literals_1 = require("@angular-devkit/core/src/utils/literals");
var WebDevServerBuilder = /** @class */ (function () {
    function WebDevServerBuilder(context) {
        this.context = context;
        this.webpackDevServerBuilder = new build_webpack_1.WebpackDevServerBuilder(this.context);
        this.root = core_1.getSystemPath(this.context.workspace.root);
    }
    WebDevServerBuilder.prototype.run = function (builderConfig) {
        var _this = this;
        var serveOptions = builderConfig.options;
        return this.getBuildOptions(serveOptions).pipe(operators_1.map(function (buildOptions) {
            buildOptions = normalize_1.normalizeWebBuildOptions(buildOptions, _this.root, builderConfig.sourceRoot);
            var webpackConfig = devserver_config_1.getDevServerConfig(buildOptions, serveOptions, _this.context.logger);
            if (buildOptions.webpackConfig) {
                webpackConfig = require(buildOptions.webpackConfig)(webpackConfig, {
                    buildOptions: buildOptions,
                    configuration: serveOptions.buildTarget.split(':')[2]
                });
            }
            return [webpackConfig, buildOptions];
        }), operators_1.tap(function (_a) {
            var _ = _a[0], options = _a[1];
            var path = serve_path_1.buildServePath(options);
            var serverUrl = url.format({
                protocol: serveOptions.ssl ? 'https' : 'http',
                hostname: serveOptions.host === '0.0.0.0' ? 'localhost' : serveOptions.host,
                port: serveOptions.port.toString(),
                path: path
            });
            _this.context.logger.info(literals_1.stripIndents(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n            **\n            Web Development Server is listening at ", "\n            **\n          "], ["\n            **\n            Web Development Server is listening at ", "\n            **\n          "])), serverUrl));
            if (serveOptions.open) {
                opn(serverUrl, {
                    wait: false
                });
            }
        }), operators_1.switchMap(function (_a) {
            var config = _a[0], options = _a[1];
            return _this.webpackDevServerBuilder.runWebpackDevServer(config, undefined, function (stats) {
                if (options.statsJson) {
                    fs_1.writeFileSync(path_1.resolve(_this.root, options.outputPath, 'stats.json'), JSON.stringify(stats.toJson(), null, 2));
                }
                _this.context.logger.info(stats.toString());
            });
        }));
    };
    WebDevServerBuilder.prototype.getBuildOptions = function (options) {
        var _this = this;
        var builderConfig = this.getBuildBuilderConfig(options);
        return this.context.architect.getBuilderDescription(builderConfig).pipe(operators_1.concatMap(function (buildDescription) {
            return _this.context.architect.validateBuilderOptions(builderConfig, buildDescription);
        }), operators_1.map(function (builderConfig) { return builderConfig.options; }));
    };
    WebDevServerBuilder.prototype.getBuildBuilderConfig = function (options) {
        var _a = options.buildTarget.split(':'), project = _a[0], target = _a[1], configuration = _a[2];
        return this.context.architect.getBuilderConfiguration({
            project: project,
            target: target,
            configuration: configuration,
            overrides: {
                watch: options.watch
            }
        });
    };
    return WebDevServerBuilder;
}());
exports.default = WebDevServerBuilder;
var templateObject_1;
