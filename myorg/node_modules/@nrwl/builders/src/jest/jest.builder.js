"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var path = require("path");
var core_1 = require("@angular-devkit/core");
try {
    require('dotenv').config();
}
catch (e) { }
var runCLI = require('jest').runCLI;
var JestBuilder = /** @class */ (function () {
    function JestBuilder(context) {
        this.context = context;
    }
    JestBuilder.prototype.run = function (builderConfig) {
        var options = builderConfig.options;
        options.jestConfig = path.resolve(core_1.getSystemPath(this.context.workspace.root), options.jestConfig);
        var tsJestConfig = {
            tsConfig: path.resolve(core_1.getSystemPath(this.context.workspace.root), options.tsConfig),
            // Typechecking wasn't done in Jest 23 but is done in 24. This makes errors a warning to amend the breaking change for now
            // Remove for v8 to fail on type checking failure
            diagnostics: {
                warnOnly: true
            }
        };
        // TODO: This is hacky, We should probably just configure it in the user's workspace
        // If jest-preset-angular is installed, apply settings
        try {
            require.resolve('jest-preset-angular');
            Object.assign(tsJestConfig, {
                stringifyContentPathRegex: '\\.html$',
                astTransformers: [
                    'jest-preset-angular/InlineHtmlStripStylesTransformer'
                ]
            });
        }
        catch (e) { }
        var config = {
            coverage: options.codeCoverage,
            bail: options.bail,
            ci: options.ci,
            color: options.color,
            json: options.json,
            maxWorkers: options.maxWorkers,
            onlyChanged: options.onlyChanged,
            outputFile: options.outputFile,
            passWithNoTests: options.passWithNoTests,
            runInBand: options.runInBand,
            silent: options.silent,
            testNamePattern: options.testNamePattern,
            updateSnapshot: options.updateSnapshot,
            useStderr: options.useStderr,
            watch: options.watch,
            watchAll: options.watchAll,
            globals: JSON.stringify({
                'ts-jest': tsJestConfig
            })
        };
        if (options.setupFile) {
            config.setupTestFrameworkScriptFile = path.join('<rootDir>', path.relative(builderConfig.root, options.setupFile));
        }
        if (options.testFile) {
            config._ = [options.testFile];
        }
        return rxjs_1.from(runCLI(config, [options.jestConfig])).pipe(operators_1.map(function (results) {
            return {
                success: results.results.success
            };
        }));
    };
    return JestBuilder;
}());
exports.default = JestBuilder;
