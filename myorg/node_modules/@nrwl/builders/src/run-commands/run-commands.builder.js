"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var child_process_1 = require("child_process");
try {
    require('dotenv').config();
}
catch (e) { }
var RunCommandsBuilder = /** @class */ (function () {
    function RunCommandsBuilder() {
    }
    RunCommandsBuilder.prototype.run = function (config) {
        var _this = this;
        config.options.parsedArgs = __assign({}, config.options, this.parseArgs(config.options.args));
        return rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var success, _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!config || !config.options || !config.options.commands) {
                            observer.error('ERROR: Bad builder config for @nrwl/run-command - "commands" option is required');
                            return [2 /*return*/];
                        }
                        if (config.options.readyWhen && !config.options.parallel) {
                            observer.error('ERROR: Bad builder config for @nrwl/run-command - "readyWhen" can only be used when parallel=true');
                            return [2 /*return*/];
                        }
                        if (config.options.commands.some(function (c) { return !c.command; })) {
                            observer.error('ERROR: Bad builder config for @nrwl/run-command - "command" option is required');
                            return [2 /*return*/];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!config.options.parallel) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.runInParallel(config)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.runSerially(config)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        success = _a;
                        observer.next({ success: success });
                        observer.complete();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _b.sent();
                        observer.error("ERROR: Something went wrong in @nrwl/run-command - " + e_1.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); });
    };
    RunCommandsBuilder.prototype.runInParallel = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var procs, r, r, failed;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        procs = config.options.commands.map(function (c) {
                            return _this.createProcess(_this.transformCommand(c.command, config.options.parsedArgs), config.options.readyWhen).then(function (result) { return ({
                                result: result,
                                command: c.command
                            }); });
                        });
                        if (!config.options.readyWhen) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.race(procs)];
                    case 1:
                        r = _a.sent();
                        if (!r.result) {
                            process.stderr.write("Warning: @nrwl/run-command command \"" + r.command + "\" exited with non-zero status code");
                            return [2 /*return*/, false];
                        }
                        else {
                            return [2 /*return*/, true];
                        }
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, Promise.all(procs)];
                    case 3:
                        r = _a.sent();
                        failed = r.filter(function (v) { return !v.result; });
                        if (failed.length > 0) {
                            failed.forEach(function (f) {
                                process.stderr.write("Warning: @nrwl/run-command command \"" + f.command + "\" exited with non-zero status code");
                            });
                            return [2 /*return*/, false];
                        }
                        else {
                            return [2 /*return*/, true];
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RunCommandsBuilder.prototype.runSerially = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var failedCommand;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, config.options.commands.reduce(function (m, c) { return __awaiter(_this, void 0, void 0, function () {
                            var success;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, m];
                                    case 1:
                                        if (!((_a.sent()) === null)) return [3 /*break*/, 3];
                                        return [4 /*yield*/, this.createProcess(this.transformCommand(c.command, config.options.parsedArgs), config.options.readyWhen)];
                                    case 2:
                                        success = _a.sent();
                                        return [2 /*return*/, !success ? c.command : null];
                                    case 3: return [2 /*return*/, m];
                                }
                            });
                        }); }, Promise.resolve(null))];
                    case 1:
                        failedCommand = _a.sent();
                        if (failedCommand) {
                            process.stderr.write("Warning: @nrwl/run-command command \"" + failedCommand + "\" exited with non-zero status code");
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RunCommandsBuilder.prototype.createProcess = function (command, readyWhen) {
        return new Promise(function (res) {
            var TEN_MEGABYTES = 1024 * 10000;
            var childProcess = child_process_1.exec(command, { maxBuffer: TEN_MEGABYTES });
            /**
             * Ensure the child process is killed when the parent exits
             */
            process.on('exit', function () { return childProcess.kill(); });
            childProcess.stdout.on('data', function (data) {
                process.stdout.write(data);
                if (readyWhen && data.toString().indexOf(readyWhen) > -1) {
                    res(true);
                }
            });
            childProcess.stderr.on('data', function (err) {
                process.stderr.write(err);
                if (readyWhen && err.toString().indexOf(readyWhen) > -1) {
                    res(true);
                }
            });
            childProcess.on('close', function (code) {
                if (!readyWhen) {
                    res(code === 0);
                }
            });
        });
    };
    RunCommandsBuilder.prototype.transformCommand = function (command, args) {
        var regex = /{args\.([^}]+)}/g;
        return command.replace(regex, function (_, group) { return args[group]; });
    };
    RunCommandsBuilder.prototype.parseArgs = function (args) {
        if (!args) {
            return {};
        }
        return args
            .split(' ')
            .map(function (t) { return t.trim(); })
            .reduce(function (m, c) {
            if (!c.startsWith('--')) {
                throw new Error("Invalid args: " + args);
            }
            var _a = c.substring(2).split('='), key = _a[0], value = _a[1];
            if (!key || !value) {
                throw new Error("Invalid args: " + args);
            }
            m[key] = value;
            return m;
        }, {});
    };
    return RunCommandsBuilder;
}());
exports.default = RunCommandsBuilder;
