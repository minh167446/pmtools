"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular-devkit/core");
var web_config_1 = require("./web.config");
var node_1 = require("@angular-devkit/core/node");
var ts = require("typescript");
describe('getWebConfig', function () {
    var input;
    var logger;
    var mockCompilerOptions;
    beforeEach(function () {
        input = {
            main: 'main.ts',
            index: 'index.html',
            budgets: [],
            baseHref: '/',
            deployUrl: '/',
            sourceMap: {
                scripts: true,
                styles: true,
                hidden: false,
                vendors: false
            },
            optimization: {
                scripts: false,
                styles: false
            },
            styles: [],
            scripts: [],
            outputPath: 'dist',
            tsConfig: 'tsconfig.json',
            fileReplacements: [],
            root: core_1.getSystemPath(core_1.normalize(__dirname)),
            sourceRoot: core_1.normalize('packages/builders')
        };
        logger = node_1.createConsoleLogger();
        mockCompilerOptions = {
            target: 'es2015',
            paths: { path: ['mapped/path'] }
        };
        spyOn(ts, 'readConfigFile').and.callFake(function () { return ({
            config: {
                compilerOptions: mockCompilerOptions
            }
        }); });
    });
    it('should resolve the browser main field', function () {
        var result = web_config_1.getWebConfig(input, logger);
        expect(result.resolve.mainFields).toContain('browser');
    });
    it('should use the style-loader to load styles', function () {
        var result = web_config_1.getWebConfig(input, logger);
        expect(result.module.rules.find(function (rule) { return rule.test.test('styles.css'); }).use[0]
            .loader).toEqual('style-loader');
        expect(result.module.rules.find(function (rule) { return rule.test.test('styles.scss'); }).use[0]
            .loader).toEqual('style-loader');
    });
    describe('polyfills', function () {
        it('should set the polyfills entry', function () {
            var result = web_config_1.getWebConfig(__assign({}, input, { polyfills: 'polyfills.ts' }), logger);
            expect(result.entry.polyfills).toEqual(['polyfills.ts']);
        });
    });
    describe('es2015 polyfills', function () {
        it('should set the es2015-polyfills entry', function () {
            var result = web_config_1.getWebConfig(__assign({}, input, { es2015Polyfills: 'polyfills.es2015.ts' }), logger);
            expect(result.entry['es2015-polyfills']).toEqual(['polyfills.es2015.ts']);
        });
    });
});
