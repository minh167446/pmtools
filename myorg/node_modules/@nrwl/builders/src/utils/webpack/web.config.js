"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeWebpack = require("webpack-merge");
var config_1 = require("./config");
var webpack_configs_1 = require("@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs");
var normalize_1 = require("../normalize");
var typescript_1 = require("../typescript");
var path_1 = require("path");
var typescript = require("typescript");
function getWebConfig(options, logger) {
    var tsConfig = typescript_1.readTsConfig(options.tsConfig);
    var supportES2015 = tsConfig.options.target !== typescript.ScriptTarget.ES5 &&
        tsConfig.options.target !== typescript.ScriptTarget.ES3;
    var wco = {
        root: options.root,
        projectRoot: path_1.resolve(options.root, options.sourceRoot),
        buildOptions: normalize_1.convertBuildOptions(options),
        supportES2015: supportES2015,
        logger: logger,
        tsConfig: tsConfig,
        tsConfigPath: options.tsConfig
    };
    return mergeWebpack([
        _getBaseWebpackPartial(options),
        options.polyfills ? getPolyfillsPartial(options) : {},
        options.es2015Polyfills ? getEs2015PolyfillsPartial(options) : {},
        getStylesPartial(wco),
        getCommonPartial(wco),
        webpack_configs_1.getBrowserConfig(wco)
    ]);
}
exports.getWebConfig = getWebConfig;
function _getBaseWebpackPartial(options) {
    var partial = config_1.getBaseWebpackPartial(options);
    delete partial.resolve.mainFields;
    return partial;
}
function getCommonPartial(wco) {
    var commonConfig = webpack_configs_1.getCommonConfig(wco);
    delete commonConfig.entry;
    // delete commonConfig.devtool;
    delete commonConfig.resolve.modules;
    delete commonConfig.resolve.extensions;
    delete commonConfig.output.path;
    delete commonConfig.module;
    return commonConfig;
}
function getStylesPartial(wco) {
    var partial = webpack_configs_1.getStylesConfig(wco);
    partial.module.rules = partial.module.rules.map(function (rule) {
        if (!Array.isArray(rule.use)) {
            return rule;
        }
        rule.use = rule.use.map(function (loaderConfig) {
            if (typeof loaderConfig === 'object' &&
                loaderConfig.loader === 'raw-loader') {
                return {
                    loader: 'style-loader'
                };
            }
            return loaderConfig;
        });
        return rule;
    });
    return partial;
}
function getPolyfillsPartial(options) {
    return {
        entry: {
            polyfills: [options.polyfills]
        }
    };
}
function getEs2015PolyfillsPartial(options) {
    var _a;
    return {
        entry: (_a = {},
            _a['es2015-polyfills'] = [options.es2015Polyfills],
            _a)
    };
}
