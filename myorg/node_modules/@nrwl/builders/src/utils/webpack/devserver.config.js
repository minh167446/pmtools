"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path = require("path");
var url = require("url");
var web_config_1 = require("./web.config");
var serve_path_1 = require("../serve-path");
function getDevServerConfig(buildOptions, serveOptions, logger) {
    var webpackConfig = web_config_1.getWebConfig(buildOptions, logger);
    webpackConfig.devServer = getDevServerPartial(serveOptions, buildOptions);
    if (serveOptions.liveReload) {
        webpackConfig.entry['main'].unshift(getLiveReloadEntry(serveOptions));
    }
    return webpackConfig;
}
exports.getDevServerConfig = getDevServerConfig;
function getLiveReloadEntry(serveOptions) {
    var clientAddress = (serveOptions.ssl ? 'https' : 'http') + "://0.0.0.0:0";
    if (serveOptions.publicHost) {
        var publicHost = serveOptions.publicHost;
        if (!/^\w+:\/\//.test(publicHost)) {
            publicHost = (serveOptions.ssl ? 'https' : 'http') + "://" + publicHost;
        }
        var clientUrl = url.parse(publicHost);
        serveOptions.publicHost = clientUrl.host;
        clientAddress = url.format(clientUrl);
    }
    var webpackDevServerPath;
    try {
        webpackDevServerPath = require.resolve('webpack-dev-server/client');
    }
    catch (_a) {
        throw new Error('The "webpack-dev-server" package could not be found.');
    }
    return webpackDevServerPath + "?" + clientAddress;
}
function getDevServerPartial(options, buildOptions) {
    var servePath = serve_path_1.buildServePath(buildOptions);
    var _a = buildOptions.optimization, scriptsOptimization = _a.scripts, stylesOptimization = _a.styles;
    var config = {
        host: options.host,
        port: options.port,
        headers: { 'Access-Control-Allow-Origin': '*' },
        historyApiFallback: {
            index: servePath + "/" + path.basename(buildOptions.index),
            disableDotRule: true,
            htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']
        },
        stats: false,
        compress: scriptsOptimization || stylesOptimization,
        https: options.ssl,
        overlay: {
            errors: !(scriptsOptimization || stylesOptimization),
            warnings: false
        },
        watchOptions: {
            poll: buildOptions.poll
        },
        public: options.publicHost,
        publicPath: servePath,
        contentBase: false
    };
    if (options.ssl && options.sslKey && options.sslCert) {
        config.https = getSslConfig(buildOptions.root, options);
    }
    if (options.proxyConfig) {
        config.proxy = getProxyConfig(buildOptions.root, options);
    }
    return config;
}
function getSslConfig(root, options) {
    return {
        key: fs_1.readFileSync(path.resolve(root, options.sslKey), 'utf-8'),
        cert: fs_1.readFileSync(path.resolve(root, options.sslCert), 'utf-8')
    };
}
function getProxyConfig(root, options) {
    var proxyPath = path.resolve(root, options.proxyConfig);
    return require(proxyPath);
}
