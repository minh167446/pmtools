"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_config_1 = require("./node.config");
var core_1 = require("@angular-devkit/core");
var webpack_1 = require("webpack");
describe('getNodePartial', function () {
    var input;
    beforeEach(function () {
        input = {
            main: 'main.ts',
            outputPath: 'dist',
            tsConfig: 'tsconfig.json',
            externalDependencies: 'all',
            fileReplacements: [],
            root: core_1.getSystemPath(core_1.normalize('/root')),
            statsJson: false
        };
    });
    describe('unconditionally', function () {
        it('should target commonjs', function () {
            var result = node_config_1.getNodeWebpackConfig(input);
            expect(result.output.libraryTarget).toEqual('commonjs');
        });
        it('should target node', function () {
            var result = node_config_1.getNodeWebpackConfig(input);
            expect(result.target).toEqual('node');
        });
        it('should not polyfill node apis', function () {
            var result = node_config_1.getNodeWebpackConfig(input);
            expect(result.node).toEqual(false);
        });
    });
    describe('the optimization option when true', function () {
        it('should not minify', function () {
            var result = node_config_1.getNodeWebpackConfig(__assign({}, input, { optimization: true }));
            expect(result.optimization.minimize).toEqual(false);
        });
        it('should not concatenate modules', function () {
            var result = node_config_1.getNodeWebpackConfig(__assign({}, input, { optimization: true }));
            expect(result.optimization.concatenateModules).toEqual(false);
        });
    });
    describe('the externalDependencies option', function () {
        it('should change all node_modules to commonjs imports', function () {
            var result = node_config_1.getNodeWebpackConfig(input);
            var callback = jest.fn();
            result.externals[0](null, '@angular/core', callback);
            expect(callback).toHaveBeenCalledWith(null, 'commonjs @angular/core');
        });
        it('should change given module names to commonjs imports but not others', function () {
            var result = node_config_1.getNodeWebpackConfig(__assign({}, input, { externalDependencies: ['module1'] }));
            var callback = jest.fn();
            result.externals[0](null, 'module1', callback);
            expect(callback).toHaveBeenCalledWith(null, 'commonjs module1');
            result.externals[0](null, '@angular/core', callback);
            expect(callback).toHaveBeenCalledWith();
        });
        it('should not change any modules to commonjs imports', function () {
            var result = node_config_1.getNodeWebpackConfig(__assign({}, input, { externalDependencies: 'none' }));
            expect(result.externals).not.toBeDefined();
        });
    });
    describe('the sourceMap option when true', function () {
        it('should add a BannerPlugin', function () {
            var result = node_config_1.getNodeWebpackConfig(__assign({}, input, { sourceMap: true }));
            var bannerPlugin = result.plugins.find(function (plugin) { return plugin instanceof webpack_1.BannerPlugin; });
            var options = bannerPlugin.options;
            expect(bannerPlugin).toBeTruthy();
            expect(options.banner).toEqual('require("source-map-support").install();');
            expect(options.raw).toEqual(true);
            expect(options.entryOnly).toEqual(false);
        });
    });
});
