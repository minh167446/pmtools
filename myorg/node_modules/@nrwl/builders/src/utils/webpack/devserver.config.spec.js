"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular-devkit/core");
var devserver_config_1 = require("./devserver.config");
var ts = require("typescript");
var fs = require("fs");
describe('getDevServerConfig', function () {
    var buildInput;
    var serveInput;
    var mockCompilerOptions;
    var logger;
    beforeEach(function () {
        buildInput = {
            main: 'main.ts',
            index: 'index.html',
            budgets: [],
            baseHref: '/',
            deployUrl: '/',
            sourceMap: {
                scripts: true,
                styles: true,
                hidden: false,
                vendors: false
            },
            optimization: {
                scripts: false,
                styles: false
            },
            styles: [],
            scripts: [],
            outputPath: 'dist',
            tsConfig: 'tsconfig.json',
            fileReplacements: [],
            root: core_1.getSystemPath(core_1.normalize(__dirname)),
            sourceRoot: core_1.normalize('packages/builders')
        };
        serveInput = {
            host: 'localhost',
            port: 4200,
            buildTarget: 'webapp:build',
            ssl: false,
            liveReload: true,
            open: false,
            watch: true
        };
        mockCompilerOptions = {
            target: 'es2015',
            paths: { path: ['mapped/path'] }
        };
        spyOn(ts, 'readConfigFile').and.callFake(function () { return ({
            config: {
                compilerOptions: mockCompilerOptions
            }
        }); });
    });
    describe('unconditional settings', function () {
        it('should allow requests from any domain', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.headers['Access-Control-Allow-Origin']).toEqual('*');
        });
        it('should not display warnings in the overlay', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.overlay.warnings).toEqual(false);
        });
        it('should not emit stats', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.stats).toEqual(false);
        });
        it('should not have a contentBase', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.contentBase).toEqual(false);
        });
    });
    describe('host option', function () {
        it('should set the host option', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.host).toEqual('localhost');
        });
    });
    describe('port option', function () {
        it('should set the port option', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.port).toEqual(4200);
        });
    });
    describe('build options', function () {
        it('should set the history api fallback options', function () {
            var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
            expect(result.historyApiFallback).toEqual({
                index: '//index.html',
                disableDotRule: true,
                htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']
            });
        });
        describe('optimization', function () {
            it('should not compress assets by default', function () {
                var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger).devServer;
                expect(result.compress).toEqual(false);
            });
            it('should compress assets if scripts optimization is on', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: true,
                        styles: false
                    } }), serveInput, logger).devServer;
                expect(result.compress).toEqual(true);
            });
            it('should compress assets if styles optimization is on', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: false,
                        styles: true
                    } }), serveInput, logger).devServer;
                expect(result.compress).toEqual(true);
            });
            it('should compress assets if all optimization is on', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: true,
                        styles: true
                    } }), serveInput, logger).devServer;
                expect(result.compress).toEqual(true);
            });
            it('should show an overlay when optimization is off', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: false,
                        styles: false
                    } }), serveInput, logger).devServer;
                expect(result.overlay.errors).toEqual(true);
            });
            it('should not show an overlay when optimization is on', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: true,
                        styles: true
                    } }), serveInput, logger).devServer;
                expect(result.overlay.errors).toEqual(false);
            });
        });
        describe('liveReload option', function () {
            it('should push the live reload entry to the main entry', function () {
                var result = devserver_config_1.getDevServerConfig(buildInput, serveInput, logger);
                expect(result.entry['main']).toContain(require.resolve('webpack-dev-server/client') + "?http://0.0.0.0:0");
            });
            it('should push the correct entry when publicHost option is used', function () {
                var result = devserver_config_1.getDevServerConfig(buildInput, __assign({}, serveInput, { publicHost: 'www.example.com' }), logger);
                expect(result.entry['main']).toContain(require.resolve('webpack-dev-server/client') + "?http://www.example.com/");
            });
            it('should push the correct entry when publicHost and ssl options are used', function () {
                var result = devserver_config_1.getDevServerConfig(buildInput, __assign({}, serveInput, { ssl: true, publicHost: 'www.example.com' }), logger);
                expect(result.entry['main']).toContain(require.resolve('webpack-dev-server/client') + "?https://www.example.com/");
            });
        });
        describe('ssl option', function () {
            it('should set https to false if not on', function () {
                var result = devserver_config_1.getDevServerConfig(__assign({}, buildInput, { optimization: {
                        scripts: true,
                        styles: true
                    } }), serveInput, logger).devServer;
                expect(result.https).toEqual(false);
            });
            it('should configure it with the key and cert provided when on', function () {
                spyOn(fs, 'readFileSync').and.callFake(function (path) {
                    if (path.endsWith('ssl.key')) {
                        return 'sslKeyContents';
                    }
                    else if (path.endsWith('ssl.cert')) {
                        return 'sslCertContents';
                    }
                });
                var result = devserver_config_1.getDevServerConfig(buildInput, __assign({}, serveInput, { ssl: true, sslKey: 'ssl.key', sslCert: 'ssl.cert' }), logger).devServer;
                expect(result.https).toEqual({
                    key: 'sslKeyContents',
                    cert: 'sslCertContents'
                });
            });
        });
        describe('proxyConfig option', function () {
            it('should setProxyConfig', function () {
                jest.mock(core_1.join(core_1.normalize(__dirname), 'proxy.conf'), function () { return ({
                    proxyConfig: 'proxyConfig'
                }); }, {
                    virtual: true
                });
                var result = devserver_config_1.getDevServerConfig(buildInput, __assign({}, serveInput, { proxyConfig: 'proxy.conf' }), logger).devServer;
                expect(result.proxy).toEqual({
                    proxyConfig: 'proxyConfig'
                });
            });
        });
    });
});
