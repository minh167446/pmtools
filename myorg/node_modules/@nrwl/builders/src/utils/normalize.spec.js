"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var normalize_1 = require("./normalize");
var core_1 = require("@angular-devkit/core");
var fs = require("fs");
describe('normalizeBuildOptions', function () {
    var testOptions;
    var root;
    var sourceRoot;
    beforeEach(function () {
        testOptions = {
            main: 'apps/nodeapp/src/main.ts',
            tsConfig: 'apps/nodeapp/tsconfig.app.json',
            outputPath: 'dist/apps/nodeapp',
            fileReplacements: [
                {
                    replace: 'apps/environment/environment.ts',
                    with: 'apps/environment/environment.prod.ts'
                },
                {
                    replace: 'module1.ts',
                    with: 'module2.ts'
                }
            ],
            assets: [],
            statsJson: false
        };
        root = '/root';
        sourceRoot = core_1.normalize('apps/nodeapp/src');
    });
    it('should add the root', function () {
        var result = normalize_1.normalizeBuildOptions(testOptions, root, sourceRoot);
        expect(result.root).toEqual('/root');
    });
    it('should resolve main from root', function () {
        var result = normalize_1.normalizeBuildOptions(testOptions, root, sourceRoot);
        expect(result.main).toEqual('/root/apps/nodeapp/src/main.ts');
    });
    it('should resolve the output path', function () {
        var result = normalize_1.normalizeBuildOptions(testOptions, root, sourceRoot);
        expect(result.outputPath).toEqual('/root/dist/apps/nodeapp');
    });
    it('should resolve the tsConfig path', function () {
        var result = normalize_1.normalizeBuildOptions(testOptions, root, sourceRoot);
        expect(result.tsConfig).toEqual('/root/apps/nodeapp/tsconfig.app.json');
    });
    it('should normalize asset patterns', function () {
        spyOn(fs, 'statSync').and.returnValue({
            isDirectory: function () { return true; }
        });
        var result = normalize_1.normalizeBuildOptions(__assign({}, testOptions, { root: root, assets: [
                'apps/nodeapp/src/assets',
                {
                    input: '/outsideroot',
                    output: 'output',
                    glob: '**/*',
                    ignore: ['**/*.json']
                }
            ] }), root, sourceRoot);
        expect(result.assets).toEqual([
            {
                input: '/root/apps/nodeapp/src/assets',
                output: 'assets',
                glob: '**/*'
            },
            {
                input: '/outsideroot',
                output: 'output',
                glob: '**/*',
                ignore: ['**/*.json']
            }
        ]);
    });
    it('should resolve the file replacement paths', function () {
        var result = normalize_1.normalizeBuildOptions(testOptions, root, sourceRoot);
        expect(result.fileReplacements).toEqual([
            {
                replace: '/root/apps/environment/environment.ts',
                with: '/root/apps/environment/environment.prod.ts'
            },
            {
                replace: '/root/module1.ts',
                with: '/root/module2.ts'
            }
        ]);
    });
});
