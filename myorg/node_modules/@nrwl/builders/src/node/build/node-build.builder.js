"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular-devkit/core");
var build_webpack_1 = require("@angular-devkit/build-webpack");
var fs_1 = require("fs");
var config_1 = require("../../utils/webpack/config");
var path_1 = require("path");
var operators_1 = require("rxjs/operators");
var node_config_1 = require("../../utils/webpack/node.config");
var normalize_1 = require("../../utils/normalize");
try {
    require('dotenv').config();
}
catch (e) { }
var BuildNodeBuilder = /** @class */ (function () {
    function BuildNodeBuilder(context) {
        this.context = context;
        this.webpackBuilder = new build_webpack_1.WebpackBuilder(this.context);
        this.root = core_1.getSystemPath(this.context.workspace.root);
    }
    BuildNodeBuilder.prototype.run = function (builderConfig) {
        var _this = this;
        var options = normalize_1.normalizeBuildOptions(builderConfig.options, this.root, builderConfig.sourceRoot);
        var config = node_config_1.getNodeWebpackConfig(options);
        if (options.webpackConfig) {
            config = require(options.webpackConfig)(config, {
                options: options,
                configuration: this.context.targetSpecifier.configuration
            });
        }
        return this.webpackBuilder
            .runWebpack(config, function (stats) {
            if (options.statsJson) {
                fs_1.writeFileSync(path_1.resolve(_this.root, options.outputPath, 'stats.json'), JSON.stringify(stats.toJson(), null, 2));
            }
            _this.context.logger.info(stats.toString());
        })
            .pipe(operators_1.map(function (buildEvent) { return (__assign({}, buildEvent, { outfile: path_1.resolve(_this.root, options.outputPath, config_1.OUT_FILENAME) })); }));
    };
    return BuildNodeBuilder;
}());
exports.default = BuildNodeBuilder;
