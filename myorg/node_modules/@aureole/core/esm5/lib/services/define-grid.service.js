/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineGrid } from '../entities/sys_define_grid.entity';
var DefineGridService = /** @class */ (function () {
    function DefineGridService(defineGridRepository) {
        this.defineGridRepository = defineGridRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DefineGridService.prototype.getDefineGrid = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.defineGridRepository.find({
                            company: context.company,
                            pid: context.pid,
                            grid_id: context.grid_id
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DefineGridService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, InjectRepository(SysDefineGrid)),
        tslib_1.__metadata("design:paramtypes", [Repository])
    ], DefineGridService);
    return DefineGridService;
}());
export { DefineGridService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineGridService.prototype.defineGridRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLWdyaWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhaXQvYWl0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZGVmaW5lLWdyaWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7SUFJakUsMkJBRW1CLG9CQUErQztRQUEvQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQTJCO0lBQy9ELENBQUM7Ozs7O0lBRUUseUNBQWE7Ozs7SUFBbkIsVUFBb0IsT0FBWTs7Ozs0QkFDdkIscUJBQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQzs0QkFDMUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPOzRCQUN4QixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7NEJBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTzt5QkFDekIsQ0FBQyxFQUFBOzRCQUpGLHNCQUFPLFNBSUwsRUFBQzs7OztLQUNKO0lBWlUsaUJBQWlCO1FBRDdCLFVBQVUsRUFBRTtRQUdSLG1CQUFBLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFBO2lEQUNPLFVBQVU7T0FIeEMsaUJBQWlCLENBYTdCO0lBQUQsd0JBQUM7Q0FBQSxJQUFBO1NBYlksaUJBQWlCOzs7Ozs7SUFFMUIsaURBQ2dFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmltcG9ydCB7IFN5c0RlZmluZUdyaWQgfSBmcm9tICcuLi9lbnRpdGllcy9zeXNfZGVmaW5lX2dyaWQuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlZmluZUdyaWRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFN5c0RlZmluZUdyaWQpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmluZUdyaWRSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN5c0RlZmluZUdyaWQ+XHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyBnZXREZWZpbmVHcmlkKGNvbnRleHQ6IGFueSkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGVmaW5lR3JpZFJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgcGlkOiBjb250ZXh0LnBpZCxcclxuICAgICAgZ3JpZF9pZDogY29udGV4dC5ncmlkX2lkXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19