/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineDisplay } from '../entities/sys_define_display.entity';
var DefineDisplayService = /** @class */ (function () {
    function DefineDisplayService(defineDisplayRepository) {
        this.defineDisplayRepository = defineDisplayRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DefineDisplayService.prototype.getDefineDisplays = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.defineDisplayRepository.find({
                            company: context.company,
                            emp_id: context.emp_id,
                            pid: context.pid,
                            group_id: context.group_id
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} context
     * @return {?}
     */
    DefineDisplayService.prototype.getDefineDisplay = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.defineDisplayRepository.find({
                            company: context.company,
                            emp_id: context.emp_id,
                            pid: context.pid,
                            group_id: context.group_id,
                            item_no: context.item_no
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DefineDisplayService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, InjectRepository(SysDefineDisplay)),
        tslib_1.__metadata("design:paramtypes", [Repository])
    ], DefineDisplayService);
    return DefineDisplayService;
}());
export { DefineDisplayService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineDisplayService.prototype.defineDisplayRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLWRpc3BsYXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhaXQvYWl0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZGVmaW5lLWRpc3BsYXkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOztJQUl2RSw4QkFFbUIsdUJBQXFEO1FBQXJELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBOEI7SUFDckUsQ0FBQzs7Ozs7SUFFRSxnREFBaUI7Ozs7SUFBdkIsVUFBd0IsT0FBWTs7Ozs0QkFDM0IscUJBQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQzs0QkFDN0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPOzRCQUN4QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07NEJBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRzs0QkFDaEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO3lCQUMzQixDQUFDLEVBQUE7NEJBTEYsc0JBQU8sU0FLTCxFQUFDOzs7O0tBQ0o7Ozs7O0lBRUssK0NBQWdCOzs7O0lBQXRCLFVBQXVCLE9BQVk7Ozs7NEJBQzFCLHFCQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7NEJBQzdDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTzs0QkFDeEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNOzRCQUN0QixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7NEJBQ2hCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTs0QkFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO3lCQUN6QixDQUFDLEVBQUE7NEJBTkYsc0JBQU8sU0FNTCxFQUFDOzs7O0tBQ0o7SUF2QlUsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtRQUdSLG1CQUFBLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUE7aURBQ08sVUFBVTtPQUgzQyxvQkFBb0IsQ0F3QmhDO0lBQUQsMkJBQUM7Q0FBQSxJQUFBO1NBeEJZLG9CQUFvQjs7Ozs7O0lBRTdCLHVEQUNzRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBTeXNEZWZpbmVEaXNwbGF5IH0gZnJvbSAnLi4vZW50aXRpZXMvc3lzX2RlZmluZV9kaXNwbGF5LmVudGl0eSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZWZpbmVEaXNwbGF5U2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNEZWZpbmVEaXNwbGF5KVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkZWZpbmVEaXNwbGF5UmVwb3NpdG9yeTogUmVwb3NpdG9yeTxTeXNEZWZpbmVEaXNwbGF5PlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0RGVmaW5lRGlzcGxheXMoY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kZWZpbmVEaXNwbGF5UmVwb3NpdG9yeS5maW5kKHtcclxuICAgICAgY29tcGFueTogY29udGV4dC5jb21wYW55LFxyXG4gICAgICBlbXBfaWQ6IGNvbnRleHQuZW1wX2lkLFxyXG4gICAgICBwaWQ6IGNvbnRleHQucGlkLFxyXG4gICAgICBncm91cF9pZDogY29udGV4dC5ncm91cF9pZFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXREZWZpbmVEaXNwbGF5KGNvbnRleHQ6IGFueSkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGVmaW5lRGlzcGxheVJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgZW1wX2lkOiBjb250ZXh0LmVtcF9pZCxcclxuICAgICAgcGlkOiBjb250ZXh0LnBpZCxcclxuICAgICAgZ3JvdXBfaWQ6IGNvbnRleHQuZ3JvdXBfaWQsXHJcbiAgICAgIGl0ZW1fbm86IGNvbnRleHQuaXRlbV9ub1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==