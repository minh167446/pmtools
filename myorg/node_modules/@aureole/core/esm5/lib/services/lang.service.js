/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysLang } from '../entities/sys_lang.entity';
var LangService = /** @class */ (function () {
    function LangService(langRepository) {
        this.langRepository = langRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    LangService.prototype.getLangs = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.langRepository.find({
                        company: context.company
                    })];
            });
        });
    };
    /**
     * @param {?} context
     * @return {?}
     */
    LangService.prototype.getLang = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.langRepository.find({
                        company: context.company,
                        code: context.code
                    })];
            });
        });
    };
    LangService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, InjectRepository(SysLang)),
        tslib_1.__metadata("design:paramtypes", [Repository])
    ], LangService);
    return LangService;
}());
export { LangService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LangService.prototype.langRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sYW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0lBSXBELHFCQUVtQixjQUFtQztRQUFuQyxtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7SUFDbkQsQ0FBQzs7Ozs7SUFFRSw4QkFBUTs7OztJQUFkLFVBQWUsT0FBWTs7O2dCQUN6QixzQkFBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQzt3QkFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO3FCQUN6QixDQUFDLEVBQUM7OztLQUNKOzs7OztJQUVLLDZCQUFPOzs7O0lBQWIsVUFBYyxPQUFZOzs7Z0JBQ3hCLHNCQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO3dCQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87d0JBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtxQkFDbkIsQ0FBQyxFQUFDOzs7S0FDSjtJQWpCVSxXQUFXO1FBRHZCLFVBQVUsRUFBRTtRQUdSLG1CQUFBLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFBO2lEQUNPLFVBQVU7T0FIbEMsV0FBVyxDQWtCdkI7SUFBRCxrQkFBQztDQUFBLElBQUE7U0FsQlksV0FBVzs7Ozs7O0lBRXBCLHFDQUNvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBTeXNMYW5nIH0gZnJvbSAnLi4vZW50aXRpZXMvc3lzX2xhbmcuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExhbmdTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFN5c0xhbmcpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxhbmdSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN5c0xhbmc+XHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyBnZXRMYW5ncyhjb250ZXh0OiBhbnkpIHtcclxuICAgIHJldHVybiB0aGlzLmxhbmdSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0TGFuZyhjb250ZXh0OiBhbnkpIHtcclxuICAgIHJldHVybiB0aGlzLmxhbmdSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnksXHJcbiAgICAgIGNvZGU6IGNvbnRleHQuY29kZVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==