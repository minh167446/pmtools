/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineSearch } from '../entities/sys_define_search.entity';
var DefineSearchService = /** @class */ (function () {
    function DefineSearchService(defineSearchRepository) {
        this.defineSearchRepository = defineSearchRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DefineSearchService.prototype.getDefineSearch = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.defineSearchRepository.find({
                            company: context.company,
                            pid: context.pid,
                            search_id: context.search_id
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DefineSearchService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, InjectRepository(SysDefineSearch)),
        tslib_1.__metadata("design:paramtypes", [Repository])
    ], DefineSearchService);
    return DefineSearchService;
}());
export { DefineSearchService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineSearchService.prototype.defineSearchRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLXNlYXJjaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kZWZpbmUtc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBSXJFLDZCQUVtQixzQkFBbUQ7UUFBbkQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUE2QjtJQUNuRSxDQUFDOzs7OztJQUVFLDZDQUFlOzs7O0lBQXJCLFVBQXNCLE9BQVk7Ozs7NEJBQ3pCLHFCQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7NEJBQzVDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTzs0QkFDeEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHOzRCQUNoQixTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7eUJBQzdCLENBQUMsRUFBQTs0QkFKRixzQkFBTyxTQUlMLEVBQUM7Ozs7S0FDSjtJQVpVLG1CQUFtQjtRQUQvQixVQUFVLEVBQUU7UUFHUixtQkFBQSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQTtpREFDTyxVQUFVO09BSDFDLG1CQUFtQixDQWEvQjtJQUFELDBCQUFDO0NBQUEsSUFBQTtTQWJZLG1CQUFtQjs7Ozs7O0lBRTVCLHFEQUNvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBTeXNEZWZpbmVTZWFyY2ggfSBmcm9tICcuLi9lbnRpdGllcy9zeXNfZGVmaW5lX3NlYXJjaC5lbnRpdHknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVmaW5lU2VhcmNoU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNEZWZpbmVTZWFyY2gpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmluZVNlYXJjaFJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8U3lzRGVmaW5lU2VhcmNoPlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0RGVmaW5lU2VhcmNoKGNvbnRleHQ6IGFueSkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGVmaW5lU2VhcmNoUmVwb3NpdG9yeS5maW5kKHtcclxuICAgICAgY29tcGFueTogY29udGV4dC5jb21wYW55LFxyXG4gICAgICBwaWQ6IGNvbnRleHQucGlkLFxyXG4gICAgICBzZWFyY2hfaWQ6IGNvbnRleHQuc2VhcmNoX2lkXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19