/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { CompanyService } from '../services/company.service';
var CompanyController = /** @class */ (function () {
    function CompanyController(companyService) {
        this.companyService = companyService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    CompanyController.prototype.getCompanys = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.companyService.getCompanies(body);
    };
    /**
     * @param {?} body
     * @return {?}
     */
    CompanyController.prototype.getCompany = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.companyService.getCompany(body);
    };
    tslib_1.__decorate([
        Post('get/many'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CompanyController.prototype, "getCompanys", null);
    tslib_1.__decorate([
        Post('get/one'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CompanyController.prototype, "getCompany", null);
    CompanyController = tslib_1.__decorate([
        Controller('company'),
        tslib_1.__metadata("design:paramtypes", [CompanyService])
    ], CompanyController);
    return CompanyController;
}());
export { CompanyController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CompanyController.prototype.companyService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFueS5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sbGVycy9jb21wYW55LmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0lBSTNELDJCQUE2QixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDOzs7OztJQUcvRCx1Q0FBVzs7OztJQUFYLFVBQW9CLElBQUk7UUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUdELHNDQUFVOzs7O0lBQVYsVUFBbUIsSUFBSTtRQUNyQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFQRDtRQURDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDSixtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7Ozt3REFFbEI7SUFHRDtRQURDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDSixtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7Ozt1REFFakI7SUFYVSxpQkFBaUI7UUFEN0IsVUFBVSxDQUFDLFNBQVMsQ0FBQztpREFFeUIsY0FBYztPQURoRCxpQkFBaUIsQ0FZN0I7SUFBRCx3QkFBQztDQUFBLElBQUE7U0FaWSxpQkFBaUI7Ozs7OztJQUNoQiwyQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5LCBDb250cm9sbGVyLCBQb3N0IH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgQ29tcGFueVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb21wYW55LnNlcnZpY2UnO1xyXG5cclxuQENvbnRyb2xsZXIoJ2NvbXBhbnknKVxyXG5leHBvcnQgY2xhc3MgQ29tcGFueUNvbnRyb2xsZXIge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29tcGFueVNlcnZpY2U6IENvbXBhbnlTZXJ2aWNlKSB7fVxyXG5cclxuICBAUG9zdCgnZ2V0L21hbnknKVxyXG4gIGdldENvbXBhbnlzKEBCb2R5KCkgYm9keSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcGFueVNlcnZpY2UuZ2V0Q29tcGFuaWVzKGJvZHkpO1xyXG4gIH1cclxuXHJcbiAgQFBvc3QoJ2dldC9vbmUnKVxyXG4gIGdldENvbXBhbnkoQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wYW55U2VydmljZS5nZXRDb21wYW55KGJvZHkpO1xyXG4gIH1cclxufVxyXG4iXX0=