/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { ModuleService } from '../services/module.service';
var ModuleController = /** @class */ (function () {
    function ModuleController(moduleService) {
        this.moduleService = moduleService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    ModuleController.prototype.getModules = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.moduleService.getModules(body);
    };
    /**
     * @param {?} body
     * @return {?}
     */
    ModuleController.prototype.getModule = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.moduleService.getModule(body);
    };
    tslib_1.__decorate([
        Post('get/many'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ModuleController.prototype, "getModules", null);
    tslib_1.__decorate([
        Post('get/one'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ModuleController.prototype, "getModule", null);
    ModuleController = tslib_1.__decorate([
        Controller('module'),
        tslib_1.__metadata("design:paramtypes", [ModuleService])
    ], ModuleController);
    return ModuleController;
}());
export { ModuleController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModuleController.prototype.moduleService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWl0L2FpdC1jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2xsZXJzL21vZHVsZS5jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztJQUl6RCwwQkFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDOzs7OztJQUc3RCxxQ0FBVTs7OztJQUFWLFVBQW1CLElBQUk7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUdELG9DQUFTOzs7O0lBQVQsVUFBa0IsSUFBSTtRQUNwQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFQRDtRQURDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDTCxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7OztzREFFakI7SUFHRDtRQURDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDTCxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7OztxREFFaEI7SUFYVSxnQkFBZ0I7UUFENUIsVUFBVSxDQUFDLFFBQVEsQ0FBQztpREFFeUIsYUFBYTtPQUQ5QyxnQkFBZ0IsQ0FZNUI7SUFBRCx1QkFBQztDQUFBLElBQUE7U0FaWSxnQkFBZ0I7Ozs7OztJQUNmLHlDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIENvbnRyb2xsZXIsIFBvc3QgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBNb2R1bGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbW9kdWxlLnNlcnZpY2UnO1xyXG5cclxuQENvbnRyb2xsZXIoJ21vZHVsZScpXHJcbmV4cG9ydCBjbGFzcyBNb2R1bGVDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1vZHVsZVNlcnZpY2U6IE1vZHVsZVNlcnZpY2UpIHt9XHJcblxyXG4gIEBQb3N0KCdnZXQvbWFueScpXHJcbiAgZ2V0TW9kdWxlcyhAQm9keSgpIGJvZHkpIHtcclxuICAgIHJldHVybiB0aGlzLm1vZHVsZVNlcnZpY2UuZ2V0TW9kdWxlcyhib2R5KTtcclxuICB9XHJcblxyXG4gIEBQb3N0KCdnZXQvb25lJylcclxuICBnZXRNb2R1bGUoQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tb2R1bGVTZXJ2aWNlLmdldE1vZHVsZShib2R5KTtcclxuICB9XHJcbn1cclxuIl19