/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { PageService } from '../services/page.service';
var PageController = /** @class */ (function () {
    function PageController(pageService) {
        this.pageService = pageService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    PageController.prototype.getPages = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.pageService.getPages(body);
    };
    /**
     * @param {?} body
     * @return {?}
     */
    PageController.prototype.getPage = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.pageService.getPage(body);
    };
    tslib_1.__decorate([
        Post('get/many'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PageController.prototype, "getPages", null);
    tslib_1.__decorate([
        Post('get/one'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PageController.prototype, "getPage", null);
    PageController = tslib_1.__decorate([
        Controller('page'),
        tslib_1.__metadata("design:paramtypes", [PageService])
    ], PageController);
    return PageController;
}());
export { PageController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PageController.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sbGVycy9wYWdlLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0lBSXJELHdCQUE2QixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7Ozs7O0lBR3pELGlDQUFROzs7O0lBQVIsVUFBaUIsSUFBSTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBR0QsZ0NBQU87Ozs7SUFBUCxVQUFnQixJQUFJO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQVBEO1FBREMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNQLG1CQUFBLElBQUksRUFBRSxDQUFBOzs7O2tEQUVmO0lBR0Q7UUFEQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ1AsbUJBQUEsSUFBSSxFQUFFLENBQUE7Ozs7aURBRWQ7SUFYVSxjQUFjO1FBRDFCLFVBQVUsQ0FBQyxNQUFNLENBQUM7aURBRXlCLFdBQVc7T0FEMUMsY0FBYyxDQVkxQjtJQUFELHFCQUFDO0NBQUEsSUFBQTtTQVpZLGNBQWM7Ozs7OztJQUNiLHFDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIENvbnRyb2xsZXIsIFBvc3QgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBQYWdlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BhZ2Uuc2VydmljZSc7XHJcblxyXG5AQ29udHJvbGxlcigncGFnZScpXHJcbmV4cG9ydCBjbGFzcyBQYWdlQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwYWdlU2VydmljZTogUGFnZVNlcnZpY2UpIHt9XHJcblxyXG4gIEBQb3N0KCdnZXQvbWFueScpXHJcbiAgZ2V0UGFnZXMoQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlU2VydmljZS5nZXRQYWdlcyhib2R5KTtcclxuICB9XHJcblxyXG4gIEBQb3N0KCdnZXQvb25lJylcclxuICBnZXRQYWdlKEBCb2R5KCkgYm9keSkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZVNlcnZpY2UuZ2V0UGFnZShib2R5KTtcclxuICB9XHJcbn1cclxuIl19