/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { MasterService } from '../services/master.service';
var MasterController = /** @class */ (function () {
    function MasterController(masterService) {
        this.masterService = masterService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    MasterController.prototype.getMasters = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.masterService.getMasters(body);
    };
    /**
     * @param {?} body
     * @return {?}
     */
    MasterController.prototype.getMaster = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.masterService.getMaster(body);
    };
    tslib_1.__decorate([
        Post('get/many'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MasterController.prototype, "getMasters", null);
    tslib_1.__decorate([
        Post('get/one'),
        tslib_1.__param(0, Body()),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MasterController.prototype, "getMaster", null);
    MasterController = tslib_1.__decorate([
        Controller('master'),
        tslib_1.__metadata("design:paramtypes", [MasterService])
    ], MasterController);
    return MasterController;
}());
export { MasterController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MasterController.prototype.masterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWl0L2FpdC1jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2xsZXJzL21hc3Rlci5jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztJQUl6RCwwQkFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDOzs7OztJQUc3RCxxQ0FBVTs7OztJQUFWLFVBQW1CLElBQUk7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUdELG9DQUFTOzs7O0lBQVQsVUFBa0IsSUFBSTtRQUNwQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFQRDtRQURDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDTCxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7OztzREFFakI7SUFHRDtRQURDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDTCxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7OztxREFFaEI7SUFYVSxnQkFBZ0I7UUFENUIsVUFBVSxDQUFDLFFBQVEsQ0FBQztpREFFeUIsYUFBYTtPQUQ5QyxnQkFBZ0IsQ0FZNUI7SUFBRCx1QkFBQztDQUFBLElBQUE7U0FaWSxnQkFBZ0I7Ozs7OztJQUNmLHlDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIENvbnRyb2xsZXIsIFBvc3QgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBNYXN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbWFzdGVyLnNlcnZpY2UnO1xyXG5cclxuQENvbnRyb2xsZXIoJ21hc3RlcicpXHJcbmV4cG9ydCBjbGFzcyBNYXN0ZXJDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1hc3RlclNlcnZpY2U6IE1hc3RlclNlcnZpY2UpIHt9XHJcblxyXG4gIEBQb3N0KCdnZXQvbWFueScpXHJcbiAgZ2V0TWFzdGVycyhAQm9keSgpIGJvZHkpIHtcclxuICAgIHJldHVybiB0aGlzLm1hc3RlclNlcnZpY2UuZ2V0TWFzdGVycyhib2R5KTtcclxuICB9XHJcblxyXG4gIEBQb3N0KCdnZXQvb25lJylcclxuICBnZXRNYXN0ZXIoQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXN0ZXJTZXJ2aWNlLmdldE1hc3Rlcihib2R5KTtcclxuICB9XHJcbn1cclxuIl19