/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { DefineMappingControlService } from '../services/define-mapping-control.service';
let DefineMappingControlController = class DefineMappingControlController {
    /**
     * @param {?} defineMappingControlService
     */
    constructor(defineMappingControlService) {
        this.defineMappingControlService = defineMappingControlService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    getDefineMappingControls(body) {
        return this.defineMappingControlService.getDefineMappingControls(body);
    }
    /**
     * @param {?} body
     * @return {?}
     */
    getDefineMappingControl(body) {
        return this.defineMappingControlService.getDefineMappingControl(body);
    }
};
tslib_1.__decorate([
    Post('get/many'),
    tslib_1.__param(0, Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], DefineMappingControlController.prototype, "getDefineMappingControls", null);
tslib_1.__decorate([
    Post('get/one'),
    tslib_1.__param(0, Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], DefineMappingControlController.prototype, "getDefineMappingControl", null);
DefineMappingControlController = tslib_1.__decorate([
    Controller('define-mapping-control'),
    tslib_1.__metadata("design:paramtypes", [DefineMappingControlService])
], DefineMappingControlController);
export { DefineMappingControlController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineMappingControlController.prototype.defineMappingControlService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLW1hcHBpbmctY29udHJvbC5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sbGVycy9kZWZpbmUtbWFwcGluZy1jb250cm9sLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztJQUc1RSw4QkFBOEIsU0FBOUIsOEJBQThCOzs7O0lBQ3pDLFlBQ21CLDJCQUF3RDtRQUF4RCxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTZCO0lBQ3hFLENBQUM7Ozs7O0lBR0osd0JBQXdCLENBQVMsSUFBSTtRQUNuQyxPQUFPLElBQUksQ0FBQywyQkFBMkIsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxDQUFDOzs7OztJQUdELHVCQUF1QixDQUFTLElBQUk7UUFDbEMsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGLENBQUE7QUFSQztJQURDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDUyxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7Ozs4RUFFL0I7QUFHRDtJQURDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDUyxtQkFBQSxJQUFJLEVBQUUsQ0FBQTs7Ozs2RUFFOUI7QUFiVSw4QkFBOEI7SUFEMUMsVUFBVSxDQUFDLHdCQUF3QixDQUFDOzZDQUdhLDJCQUEyQjtHQUZoRSw4QkFBOEIsQ0FjMUM7U0FkWSw4QkFBOEI7Ozs7OztJQUV2QyxxRUFBeUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5LCBDb250cm9sbGVyLCBQb3N0IH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lTWFwcGluZ0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZGVmaW5lLW1hcHBpbmctY29udHJvbC5zZXJ2aWNlJztcclxuXHJcbkBDb250cm9sbGVyKCdkZWZpbmUtbWFwcGluZy1jb250cm9sJylcclxuZXhwb3J0IGNsYXNzIERlZmluZU1hcHBpbmdDb250cm9sQ29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmluZU1hcHBpbmdDb250cm9sU2VydmljZTogRGVmaW5lTWFwcGluZ0NvbnRyb2xTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICBAUG9zdCgnZ2V0L21hbnknKVxyXG4gIGdldERlZmluZU1hcHBpbmdDb250cm9scyhAQm9keSgpIGJvZHkpIHtcclxuICAgIHJldHVybiB0aGlzLmRlZmluZU1hcHBpbmdDb250cm9sU2VydmljZS5nZXREZWZpbmVNYXBwaW5nQ29udHJvbHMoYm9keSk7XHJcbiAgfVxyXG5cclxuICBAUG9zdCgnZ2V0L29uZScpXHJcbiAgZ2V0RGVmaW5lTWFwcGluZ0NvbnRyb2woQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZpbmVNYXBwaW5nQ29udHJvbFNlcnZpY2UuZ2V0RGVmaW5lTWFwcGluZ0NvbnRyb2woYm9keSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==