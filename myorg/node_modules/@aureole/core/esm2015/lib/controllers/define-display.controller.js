/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Body, Controller, Post } from '@nestjs/common';
import { DefineDisplayService } from '../services/define-display.service';
let DefineDisplayController = class DefineDisplayController {
    /**
     * @param {?} defineDisplayService
     */
    constructor(defineDisplayService) {
        this.defineDisplayService = defineDisplayService;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    getDefineDisplays(body) {
        return this.defineDisplayService.getDefineDisplays(body);
    }
    /**
     * @param {?} body
     * @return {?}
     */
    getDefineDisplay(body) {
        return this.defineDisplayService.getDefineDisplay(body);
    }
};
tslib_1.__decorate([
    Post('get/many'),
    tslib_1.__param(0, Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], DefineDisplayController.prototype, "getDefineDisplays", null);
tslib_1.__decorate([
    Post('get/one'),
    tslib_1.__param(0, Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], DefineDisplayController.prototype, "getDefineDisplay", null);
DefineDisplayController = tslib_1.__decorate([
    Controller('define-display'),
    tslib_1.__metadata("design:paramtypes", [DefineDisplayService])
], DefineDisplayController);
export { DefineDisplayController };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineDisplayController.prototype.defineDisplayService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLWRpc3BsYXkuY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhaXQvYWl0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvY29udHJvbGxlcnMvZGVmaW5lLWRpc3BsYXkuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0lBRzdELHVCQUF1QixTQUF2Qix1QkFBdUI7Ozs7SUFDbEMsWUFBNkIsb0JBQTBDO1FBQTFDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFBRyxDQUFDOzs7OztJQUczRSxpQkFBaUIsQ0FBUyxJQUFJO1FBQzVCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7O0lBR0QsZ0JBQWdCLENBQVMsSUFBSTtRQUMzQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0YsQ0FBQTtBQVJDO0lBREMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNFLG1CQUFBLElBQUksRUFBRSxDQUFBOzs7O2dFQUV4QjtBQUdEO0lBREMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUNFLG1CQUFBLElBQUksRUFBRSxDQUFBOzs7OytEQUV2QjtBQVhVLHVCQUF1QjtJQURuQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7NkNBRXdCLG9CQUFvQjtHQUQ1RCx1QkFBdUIsQ0FZbkM7U0FaWSx1QkFBdUI7Ozs7OztJQUN0Qix1REFBMkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5LCBDb250cm9sbGVyLCBQb3N0IH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgRGVmaW5lRGlzcGxheVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kZWZpbmUtZGlzcGxheS5zZXJ2aWNlJztcclxuXHJcbkBDb250cm9sbGVyKCdkZWZpbmUtZGlzcGxheScpXHJcbmV4cG9ydCBjbGFzcyBEZWZpbmVEaXNwbGF5Q29udHJvbGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkZWZpbmVEaXNwbGF5U2VydmljZTogRGVmaW5lRGlzcGxheVNlcnZpY2UpIHt9XHJcblxyXG4gIEBQb3N0KCdnZXQvbWFueScpXHJcbiAgZ2V0RGVmaW5lRGlzcGxheXMoQEJvZHkoKSBib2R5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZpbmVEaXNwbGF5U2VydmljZS5nZXREZWZpbmVEaXNwbGF5cyhib2R5KTtcclxuICB9XHJcblxyXG4gIEBQb3N0KCdnZXQvb25lJylcclxuICBnZXREZWZpbmVEaXNwbGF5KEBCb2R5KCkgYm9keSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGVmaW5lRGlzcGxheVNlcnZpY2UuZ2V0RGVmaW5lRGlzcGxheShib2R5KTtcclxuICB9XHJcbn1cclxuIl19