/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysEmployee } from '../entities/sys_employee.entity';
let EmployeeService = class EmployeeService {
    /**
     * @param {?} employeeRepository
     */
    constructor(employeeRepository) {
        this.employeeRepository = employeeRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getEmployees(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let params = new Object();
            /** @type {?} */
            let list = [];
            if (context.name !== undefined) {
                params['name'] = context.name;
            }
            if (context.activeFlag !== undefined) {
                params['active_flag'] = context.activeFlag;
            }
            if (context.address1 !== undefined) {
                params['address1'] = context.address1;
            }
            if (context.address2 !== undefined) {
                params['address2'] = context.address2;
            }
            if (context.tel1 !== undefined) {
                params['tel1'] = context.tel1;
            }
            if (context.tel2 !== undefined) {
                params['tel2'] = context.tel2;
            }
            if (context.email !== undefined) {
                params['email'] = context.email;
            }
            if (context.sortNo !== undefined) {
                params['sort_no'] = context.sortNo;
            }
            if (context.changeCount !== undefined) {
                params['change_count'] = context.changeCount;
            }
            if (context.dataFlag !== undefined) {
                params['data_flag'] = context.dataFlag;
            }
            /** @type {?} */
            let result = yield this.employeeRepository.find(Object.assign({ company: context.company, lang: context.lang }, params));
            list = [...result];
            // NOTE Emp code
            if (context.codeFrom !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.code === context.codeFrom;
                }));
                if (index >= 0) {
                    list = list.slice(index);
                }
            }
            if (context.codeTo !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.code === context.codeTo;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            // NOTE create_emp_id
            if (context.createEmpFrom !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.create_emp_id === context.createEmpFrom;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            if (context.createEmpTo !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.create_emp_id === context.createEmpTo;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            // NOTE create_datetime
            if (context.createDatetimeFrom !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.create_datetime === new Date(context.createDatetimeFrom);
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            if (context.createDatetimeTo !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.create_datetime === context.createDatetimeTo;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            // NOTE change_emp_id
            if (context.changeEmpFrom !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.change_emp_id === context.changeEmpFrom;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            if (context.changeEmpTo !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.change_emp_id === context.changeEmpTo;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            // NOTE change_datetime
            if (context.changeDatetimeFrom !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.change_datetime === context.changeDatetimeFrom;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            if (context.changeDatetimeTo !== undefined) {
                /** @type {?} */
                let index = list.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    return element.change_datetime === context.changeDatetimeTo;
                }));
                if (index >= 0) {
                    list = list.slice(0, index + 1);
                }
            }
            return list;
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getEmployee(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.employeeRepository.find({
                company: context.company,
                lang: context.lang,
                code: context.code
            });
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    addEmployee(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (context.code !== '') {
                /** @type {?} */
                let result = yield this.employeeRepository.find({
                    company: context.company,
                    code: context.code
                });
                if (result.length <= 0) {
                    /** @type {?} */
                    let contextVi = Object.assign({}, context);
                    contextVi.lang = 'vi-VN';
                    /** @type {?} */
                    let contextEn = Object.assign({}, context);
                    contextEn.lang = 'en-US';
                    /** @type {?} */
                    let contextJa = Object.assign({}, context);
                    contextJa.lang = 'ja-JP';
                    yield this.employeeRepository.save(contextVi);
                    yield this.employeeRepository.save(contextEn);
                    yield this.employeeRepository.save(contextJa);
                    return true;
                }
                return false;
            }
            return false;
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    updateEmployee(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (context.code !== '') {
                /** @type {?} */
                let result = yield this.employeeRepository.find({
                    company: context.company,
                    code: context.code
                });
                if (result.length > 0) {
                    context.change_count++;
                    context.change_datetime = null;
                    /** @type {?} */
                    let contextVi = Object.assign({}, context);
                    contextVi.lang = 'vi-VN';
                    /** @type {?} */
                    let contextEn = Object.assign({}, context);
                    contextEn.lang = 'en-US';
                    /** @type {?} */
                    let contextJa = Object.assign({}, context);
                    contextJa.lang = 'ja-JP';
                    yield this.employeeRepository.update([contextVi.company, contextVi.lang, contextVi.code], contextVi);
                    yield this.employeeRepository.update([contextEn.company, contextEn.lang, contextEn.code], contextEn);
                    yield this.employeeRepository.update([contextJa.company, contextJa.lang, contextJa.code], contextJa);
                    return true;
                }
                return false;
            }
            return false;
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    deleteEmployee(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let result = yield this.employeeRepository.delete({ code: context });
            if (result.affected > 0) {
                return true;
            }
            return false;
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    deleteEmployees(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let result = yield this.employeeRepository.delete(context);
            if (result.affected > 0) {
                return true;
            }
            return false;
        });
    }
};
EmployeeService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysEmployee)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], EmployeeService);
export { EmployeeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EmployeeService.prototype.employeeRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wbG95ZWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhaXQvYWl0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZW1wbG95ZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztJQUdqRCxlQUFlLFNBQWYsZUFBZTs7OztJQUMxQixZQUVtQixrQkFBMkM7UUFBM0MsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF5QjtJQUMzRCxDQUFDOzs7OztJQUVFLFlBQVksQ0FBQyxPQUFZOzs7Z0JBQ3pCLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTs7Z0JBQ3JCLElBQUksR0FBRyxFQUFFO1lBRWIsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7YUFDL0I7WUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQzthQUM1QztZQUVELElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQ2xDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO2FBQ3ZDO1lBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDbEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDdkM7WUFFRCxJQUFJLE9BQU8sQ0FB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Q0FBQyxNQUFNLENBQ2xDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDbkQsU0FBUyxDQUNWLENBQUM7b0JBRUYsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztLQUFBOzs7OztJQUVLLGNBQWMsQ0FBQyxPQUFZOzs7Z0JBQzNCLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7WUFDcEUsSUFBSSxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztLQUFBOzs7OztJQUVLLGVBQWUsQ0FBQyxPQUFjOzs7Z0JBQzlCLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQzFELElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7S0FBQTtDQUNGLENBQUE7QUEvUFksZUFBZTtJQUQzQixVQUFVLEVBQUU7SUFHUixtQkFBQSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQTs2Q0FDTyxVQUFVO0dBSHRDLGVBQWUsQ0ErUDNCO1NBL1BZLGVBQWU7Ozs7OztJQUV4Qiw2Q0FDNEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RSZXBvc2l0b3J5IH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xyXG5cclxuaW1wb3J0IHsgU3lzRW1wbG95ZWUgfSBmcm9tICcuLi9lbnRpdGllcy9zeXNfZW1wbG95ZWUuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEVtcGxveWVlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNFbXBsb3llZSlcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZW1wbG95ZWVSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN5c0VtcGxveWVlPlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0RW1wbG95ZWVzKGNvbnRleHQ6IGFueSkge1xyXG4gICAgbGV0IHBhcmFtcyA9IG5ldyBPYmplY3QoKTtcclxuICAgIGxldCBsaXN0ID0gW107XHJcblxyXG4gICAgaWYgKGNvbnRleHQubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHBhcmFtc1snbmFtZSddID0gY29udGV4dC5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmFjdGl2ZUZsYWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwYXJhbXNbJ2FjdGl2ZV9mbGFnJ10gPSBjb250ZXh0LmFjdGl2ZUZsYWc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuYWRkcmVzczEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwYXJhbXNbJ2FkZHJlc3MxJ10gPSBjb250ZXh0LmFkZHJlc3MxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmFkZHJlc3MyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcGFyYW1zWydhZGRyZXNzMiddID0gY29udGV4dC5hZGRyZXNzMjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC50ZWwxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcGFyYW1zWyd0ZWwxJ10gPSBjb250ZXh0LnRlbDE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQudGVsMiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHBhcmFtc1sndGVsMiddID0gY29udGV4dC50ZWwyO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmVtYWlsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcGFyYW1zWydlbWFpbCddID0gY29udGV4dC5lbWFpbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5zb3J0Tm8gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwYXJhbXNbJ3NvcnRfbm8nXSA9IGNvbnRleHQuc29ydE5vO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmNoYW5nZUNvdW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcGFyYW1zWydjaGFuZ2VfY291bnQnXSA9IGNvbnRleHQuY2hhbmdlQ291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuZGF0YUZsYWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwYXJhbXNbJ2RhdGFfZmxhZyddID0gY29udGV4dC5kYXRhRmxhZztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5lbXBsb3llZVJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgbGFuZzogY29udGV4dC5sYW5nLFxyXG4gICAgICAuLi5wYXJhbXNcclxuICAgIH0pO1xyXG5cclxuICAgIGxpc3QgPSBbLi4ucmVzdWx0XTtcclxuXHJcbiAgICAvLyBOT1RFIEVtcCBjb2RlXHJcbiAgICBpZiAoY29udGV4dC5jb2RlRnJvbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCBpbmRleCA9IGxpc3QuZmluZEluZGV4KChlbGVtZW50OiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5jb2RlID09PSBjb250ZXh0LmNvZGVGcm9tO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3Quc2xpY2UoaW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuY29kZVRvICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmNvZGUgPT09IGNvbnRleHQuY29kZVRvO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3Quc2xpY2UoMCxpbmRleCsxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5PVEUgY3JlYXRlX2VtcF9pZFxyXG4gICAgaWYgKGNvbnRleHQuY3JlYXRlRW1wRnJvbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCBpbmRleCA9IGxpc3QuZmluZEluZGV4KChlbGVtZW50OiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5jcmVhdGVfZW1wX2lkID09PSBjb250ZXh0LmNyZWF0ZUVtcEZyb207XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICBsaXN0ID0gbGlzdC5zbGljZSgwLGluZGV4KzEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRleHQuY3JlYXRlRW1wVG8gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBsZXQgaW5kZXggPSBsaXN0LmZpbmRJbmRleCgoZWxlbWVudDogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY3JlYXRlX2VtcF9pZCA9PT0gY29udGV4dC5jcmVhdGVFbXBUbztcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgIGxpc3QgPSBsaXN0LnNsaWNlKDAsaW5kZXgrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBOT1RFIGNyZWF0ZV9kYXRldGltZVxyXG4gICAgaWYgKGNvbnRleHQuY3JlYXRlRGF0ZXRpbWVGcm9tICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmNyZWF0ZV9kYXRldGltZSA9PT0gbmV3IERhdGUoY29udGV4dC5jcmVhdGVEYXRldGltZUZyb20pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3Quc2xpY2UoMCxpbmRleCsxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb250ZXh0LmNyZWF0ZURhdGV0aW1lVG8gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBsZXQgaW5kZXggPSBsaXN0LmZpbmRJbmRleCgoZWxlbWVudDogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY3JlYXRlX2RhdGV0aW1lID09PSBjb250ZXh0LmNyZWF0ZURhdGV0aW1lVG87XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICBsaXN0ID0gbGlzdC5zbGljZSgwLGluZGV4KzEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTk9URSBjaGFuZ2VfZW1wX2lkXHJcbiAgICBpZiAoY29udGV4dC5jaGFuZ2VFbXBGcm9tICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmNoYW5nZV9lbXBfaWQgPT09IGNvbnRleHQuY2hhbmdlRW1wRnJvbTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgIGxpc3QgPSBsaXN0LnNsaWNlKDAsaW5kZXgrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5jaGFuZ2VFbXBUbyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCBpbmRleCA9IGxpc3QuZmluZEluZGV4KChlbGVtZW50OiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5jaGFuZ2VfZW1wX2lkID09PSBjb250ZXh0LmNoYW5nZUVtcFRvO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3Quc2xpY2UoMCxpbmRleCsxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5PVEUgY2hhbmdlX2RhdGV0aW1lXHJcbiAgICBpZiAoY29udGV4dC5jaGFuZ2VEYXRldGltZUZyb20gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBsZXQgaW5kZXggPSBsaXN0LmZpbmRJbmRleCgoZWxlbWVudDogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2hhbmdlX2RhdGV0aW1lID09PSBjb250ZXh0LmNoYW5nZURhdGV0aW1lRnJvbTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgIGxpc3QgPSBsaXN0LnNsaWNlKDAsaW5kZXgrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5jaGFuZ2VEYXRldGltZVRvICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmNoYW5nZV9kYXRldGltZSA9PT0gY29udGV4dC5jaGFuZ2VEYXRldGltZVRvO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgbGlzdCA9IGxpc3Quc2xpY2UoMCxpbmRleCsxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsaXN0O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RW1wbG95ZWUoY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5lbXBsb3llZVJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgbGFuZzogY29udGV4dC5sYW5nLFxyXG4gICAgICBjb2RlOiBjb250ZXh0LmNvZGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgYWRkRW1wbG95ZWUoY29udGV4dDogYW55KSB7XHJcbiAgICBpZiAoY29udGV4dC5jb2RlICE9PSAnJykge1xyXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5lbXBsb3llZVJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgICAgY29tcGFueTogY29udGV4dC5jb21wYW55LFxyXG4gICAgICAgIGNvZGU6IGNvbnRleHQuY29kZVxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgIGxldCBjb250ZXh0VmkgPSB7IC4uLmNvbnRleHQgfTtcclxuICAgICAgICBjb250ZXh0VmkubGFuZyA9ICd2aS1WTic7XHJcblxyXG4gICAgICAgIGxldCBjb250ZXh0RW4gPSB7IC4uLmNvbnRleHQgfTtcclxuICAgICAgICBjb250ZXh0RW4ubGFuZyA9ICdlbi1VUyc7XHJcblxyXG4gICAgICAgIGxldCBjb250ZXh0SmEgPSB7IC4uLmNvbnRleHQgfTtcclxuICAgICAgICBjb250ZXh0SmEubGFuZyA9ICdqYS1KUCc7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuZW1wbG95ZWVSZXBvc2l0b3J5LnNhdmUoY29udGV4dFZpKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmVtcGxveWVlUmVwb3NpdG9yeS5zYXZlKGNvbnRleHRFbik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5lbXBsb3llZVJlcG9zaXRvcnkuc2F2ZShjb250ZXh0SmEpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVFbXBsb3llZShjb250ZXh0OiBhbnkpIHtcclxuICAgIGlmIChjb250ZXh0LmNvZGUgIT09ICcnKSB7XHJcbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLmVtcGxveWVlUmVwb3NpdG9yeS5maW5kKHtcclxuICAgICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnksXHJcbiAgICAgICAgY29kZTogY29udGV4dC5jb2RlXHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb250ZXh0LmNoYW5nZV9jb3VudCsrO1xyXG4gICAgICAgIGNvbnRleHQuY2hhbmdlX2RhdGV0aW1lID0gbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHRWaSA9IHsgLi4uY29udGV4dCB9O1xyXG4gICAgICAgIGNvbnRleHRWaS5sYW5nID0gJ3ZpLVZOJztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHRFbiA9IHsgLi4uY29udGV4dCB9O1xyXG4gICAgICAgIGNvbnRleHRFbi5sYW5nID0gJ2VuLVVTJztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHRKYSA9IHsgLi4uY29udGV4dCB9O1xyXG4gICAgICAgIGNvbnRleHRKYS5sYW5nID0gJ2phLUpQJztcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5lbXBsb3llZVJlcG9zaXRvcnkudXBkYXRlKFxyXG4gICAgICAgICAgW2NvbnRleHRWaS5jb21wYW55LCBjb250ZXh0VmkubGFuZywgY29udGV4dFZpLmNvZGVdLFxyXG4gICAgICAgICAgY29udGV4dFZpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmVtcGxveWVlUmVwb3NpdG9yeS51cGRhdGUoXHJcbiAgICAgICAgICBbY29udGV4dEVuLmNvbXBhbnksIGNvbnRleHRFbi5sYW5nLCBjb250ZXh0RW4uY29kZV0sXHJcbiAgICAgICAgICBjb250ZXh0RW5cclxuICAgICAgICApO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZW1wbG95ZWVSZXBvc2l0b3J5LnVwZGF0ZShcclxuICAgICAgICAgIFtjb250ZXh0SmEuY29tcGFueSwgY29udGV4dEphLmxhbmcsIGNvbnRleHRKYS5jb2RlXSxcclxuICAgICAgICAgIGNvbnRleHRKYVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZUVtcGxveWVlKGNvbnRleHQ6IGFueSkge1xyXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW1wbG95ZWVSZXBvc2l0b3J5LmRlbGV0ZSh7IGNvZGU6IGNvbnRleHQgfSk7XHJcbiAgICBpZiAocmVzdWx0LmFmZmVjdGVkID4gMCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZUVtcGxveWVlcyhjb250ZXh0OiBhbnlbXSkge1xyXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW1wbG95ZWVSZXBvc2l0b3J5LmRlbGV0ZShjb250ZXh0KTtcclxuICAgIGlmIChyZXN1bHQuYWZmZWN0ZWQgPiAwKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG4iXX0=