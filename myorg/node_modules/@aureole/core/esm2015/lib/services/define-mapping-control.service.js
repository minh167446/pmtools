/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineMappingControl } from '../entities/sys_define_mapping_control.entity';
let DefineMappingControlService = class DefineMappingControlService {
    /**
     * @param {?} defineMappingControlRepository
     */
    constructor(defineMappingControlRepository) {
        this.defineMappingControlRepository = defineMappingControlRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineMappingControls(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineMappingControlRepository.find({
                company: context.company,
                pid: context.pid
            });
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineMappingControl(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineMappingControlRepository.find({
                company: context.company,
                pid: context.pid,
                item_no: context.item_no
            });
        });
    }
};
DefineMappingControlService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysDefineMappingControl)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], DefineMappingControlService);
export { DefineMappingControlService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineMappingControlService.prototype.defineMappingControlRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLW1hcHBpbmctY29udHJvbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kZWZpbmUtbWFwcGluZy1jb250cm9sLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztJQUczRSwyQkFBMkIsU0FBM0IsMkJBQTJCOzs7O0lBQ3RDLFlBRW1CLDhCQUVoQjtRQUZnQixtQ0FBOEIsR0FBOUIsOEJBQThCLENBRTlDO0lBQ0EsQ0FBQzs7Ozs7SUFFRSx3QkFBd0IsQ0FBQyxPQUFZOztZQUN6QyxPQUFPLE1BQU0sSUFBSSxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQztnQkFDcEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBOzs7OztJQUVLLHVCQUF1QixDQUFDLE9BQVk7O1lBQ3hDLE9BQU8sTUFBTSxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDO2dCQUNwRCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87Z0JBQ3hCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztnQkFDaEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQ3pCLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTtDQUNGLENBQUE7QUF0QlksMkJBQTJCO0lBRHZDLFVBQVUsRUFBRTtJQUdSLG1CQUFBLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUE7NkNBQ08sVUFBVTtHQUhsRCwyQkFBMkIsQ0FzQnZDO1NBdEJZLDJCQUEyQjs7Ozs7O0lBRXBDLHFFQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmltcG9ydCB7IFN5c0RlZmluZU1hcHBpbmdDb250cm9sIH0gZnJvbSAnLi4vZW50aXRpZXMvc3lzX2RlZmluZV9tYXBwaW5nX2NvbnRyb2wuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlZmluZU1hcHBpbmdDb250cm9sU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNEZWZpbmVNYXBwaW5nQ29udHJvbClcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmaW5lTWFwcGluZ0NvbnRyb2xSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFxyXG4gICAgICBTeXNEZWZpbmVNYXBwaW5nQ29udHJvbFxyXG4gICAgPlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0RGVmaW5lTWFwcGluZ0NvbnRyb2xzKGNvbnRleHQ6IGFueSkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGVmaW5lTWFwcGluZ0NvbnRyb2xSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnksXHJcbiAgICAgIHBpZDogY29udGV4dC5waWRcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RGVmaW5lTWFwcGluZ0NvbnRyb2woY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kZWZpbmVNYXBwaW5nQ29udHJvbFJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgcGlkOiBjb250ZXh0LnBpZCxcclxuICAgICAgaXRlbV9ubzogY29udGV4dC5pdGVtX25vXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19