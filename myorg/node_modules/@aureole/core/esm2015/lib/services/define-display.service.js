/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineDisplay } from '../entities/sys_define_display.entity';
let DefineDisplayService = class DefineDisplayService {
    /**
     * @param {?} defineDisplayRepository
     */
    constructor(defineDisplayRepository) {
        this.defineDisplayRepository = defineDisplayRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineDisplays(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineDisplayRepository.find({
                company: context.company,
                emp_id: context.emp_id,
                pid: context.pid,
                group_id: context.group_id
            });
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineDisplay(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineDisplayRepository.find({
                company: context.company,
                emp_id: context.emp_id,
                pid: context.pid,
                group_id: context.group_id,
                item_no: context.item_no
            });
        });
    }
};
DefineDisplayService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysDefineDisplay)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], DefineDisplayService);
export { DefineDisplayService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineDisplayService.prototype.defineDisplayRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLWRpc3BsYXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhaXQvYWl0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZGVmaW5lLWRpc3BsYXkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0lBRzVELG9CQUFvQixTQUFwQixvQkFBb0I7Ozs7SUFDL0IsWUFFbUIsdUJBQXFEO1FBQXJELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBOEI7SUFDckUsQ0FBQzs7Ozs7SUFFRSxpQkFBaUIsQ0FBQyxPQUFZOztZQUNsQyxPQUFPLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQztnQkFDN0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztnQkFDaEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2FBQzNCLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7Ozs7SUFFSyxnQkFBZ0IsQ0FBQyxPQUFZOztZQUNqQyxPQUFPLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQztnQkFDN0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztnQkFDaEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO2dCQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBO0NBQ0YsQ0FBQTtBQXhCWSxvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0lBR1IsbUJBQUEsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTs2Q0FDTyxVQUFVO0dBSDNDLG9CQUFvQixDQXdCaEM7U0F4Qlksb0JBQW9COzs7Ozs7SUFFN0IsdURBQ3NFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmltcG9ydCB7IFN5c0RlZmluZURpc3BsYXkgfSBmcm9tICcuLi9lbnRpdGllcy9zeXNfZGVmaW5lX2Rpc3BsYXkuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlZmluZURpc3BsYXlTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFN5c0RlZmluZURpc3BsYXkpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmluZURpc3BsYXlSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN5c0RlZmluZURpc3BsYXk+XHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyBnZXREZWZpbmVEaXNwbGF5cyhjb250ZXh0OiBhbnkpIHtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLmRlZmluZURpc3BsYXlSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnksXHJcbiAgICAgIGVtcF9pZDogY29udGV4dC5lbXBfaWQsXHJcbiAgICAgIHBpZDogY29udGV4dC5waWQsXHJcbiAgICAgIGdyb3VwX2lkOiBjb250ZXh0Lmdyb3VwX2lkXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldERlZmluZURpc3BsYXkoY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kZWZpbmVEaXNwbGF5UmVwb3NpdG9yeS5maW5kKHtcclxuICAgICAgY29tcGFueTogY29udGV4dC5jb21wYW55LFxyXG4gICAgICBlbXBfaWQ6IGNvbnRleHQuZW1wX2lkLFxyXG4gICAgICBwaWQ6IGNvbnRleHQucGlkLFxyXG4gICAgICBncm91cF9pZDogY29udGV4dC5ncm91cF9pZCxcclxuICAgICAgaXRlbV9ubzogY29udGV4dC5pdGVtX25vXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19