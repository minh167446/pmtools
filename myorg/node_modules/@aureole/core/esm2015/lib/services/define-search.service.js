/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineSearch } from '../entities/sys_define_search.entity';
let DefineSearchService = class DefineSearchService {
    /**
     * @param {?} defineSearchRepository
     */
    constructor(defineSearchRepository) {
        this.defineSearchRepository = defineSearchRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineSearch(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineSearchRepository.find({
                company: context.company,
                pid: context.pid,
                search_id: context.search_id
            });
        });
    }
};
DefineSearchService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysDefineSearch)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], DefineSearchService);
export { DefineSearchService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineSearchService.prototype.defineSearchRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLXNlYXJjaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kZWZpbmUtc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7SUFHMUQsbUJBQW1CLFNBQW5CLG1CQUFtQjs7OztJQUM5QixZQUVtQixzQkFBbUQ7UUFBbkQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUE2QjtJQUNuRSxDQUFDOzs7OztJQUVFLGVBQWUsQ0FBQyxPQUFZOztZQUNoQyxPQUFPLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQztnQkFDNUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7Z0JBQ2hCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUzthQUM3QixDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7Q0FDRixDQUFBO0FBYlksbUJBQW1CO0lBRC9CLFVBQVUsRUFBRTtJQUdSLG1CQUFBLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFBOzZDQUNPLFVBQVU7R0FIMUMsbUJBQW1CLENBYS9CO1NBYlksbUJBQW1COzs7Ozs7SUFFNUIscURBQ29FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmltcG9ydCB7IFN5c0RlZmluZVNlYXJjaCB9IGZyb20gJy4uL2VudGl0aWVzL3N5c19kZWZpbmVfc2VhcmNoLmVudGl0eSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZWZpbmVTZWFyY2hTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFN5c0RlZmluZVNlYXJjaClcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmaW5lU2VhcmNoUmVwb3NpdG9yeTogUmVwb3NpdG9yeTxTeXNEZWZpbmVTZWFyY2g+XHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyBnZXREZWZpbmVTZWFyY2goY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kZWZpbmVTZWFyY2hSZXBvc2l0b3J5LmZpbmQoe1xyXG4gICAgICBjb21wYW55OiBjb250ZXh0LmNvbXBhbnksXHJcbiAgICAgIHBpZDogY29udGV4dC5waWQsXHJcbiAgICAgIHNlYXJjaF9pZDogY29udGV4dC5zZWFyY2hfaWRcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=