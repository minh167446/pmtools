/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysDefineInput } from '../entities/sys_define_input.entity';
let DefineInputService = class DefineInputService {
    /**
     * @param {?} defineInputRepository
     */
    constructor(defineInputRepository) {
        this.defineInputRepository = defineInputRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getDefineInput(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.defineInputRepository.find({
                company: context.company,
                pid: context.pid,
                input_id: context.input_id
            });
        });
    }
};
DefineInputService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysDefineInput)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], DefineInputService);
export { DefineInputService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefineInputService.prototype.defineInputRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLWlucHV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWl0L2FpdC1jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2RlZmluZS1pbnB1dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0lBR3hELGtCQUFrQixTQUFsQixrQkFBa0I7Ozs7SUFDN0IsWUFFbUIscUJBQWlEO1FBQWpELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBNEI7SUFDakUsQ0FBQzs7Ozs7SUFFRSxjQUFjLENBQUMsT0FBWTs7WUFDL0IsT0FBTyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7Z0JBQzNDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztnQkFDeEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO2dCQUNoQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7YUFDM0IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBO0NBQ0YsQ0FBQTtBQWJZLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7SUFHUixtQkFBQSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQTs2Q0FDTyxVQUFVO0dBSHpDLGtCQUFrQixDQWE5QjtTQWJZLGtCQUFrQjs7Ozs7O0lBRTNCLG1EQUNrRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBTeXNEZWZpbmVJbnB1dCB9IGZyb20gJy4uL2VudGl0aWVzL3N5c19kZWZpbmVfaW5wdXQuZW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlZmluZUlucHV0U2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNEZWZpbmVJbnB1dClcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmaW5lSW5wdXRSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN5c0RlZmluZUlucHV0PlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0RGVmaW5lSW5wdXQoY29udGV4dDogYW55KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kZWZpbmVJbnB1dFJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgcGlkOiBjb250ZXh0LnBpZCxcclxuICAgICAgaW5wdXRfaWQ6IGNvbnRleHQuaW5wdXRfaWRcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=