/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SysMasterDetail } from '../entities/sys_master_detail.entity';
let MasterDetailService = class MasterDetailService {
    /**
     * @param {?} masterDetailRepository
     */
    constructor(masterDetailRepository) {
        this.masterDetailRepository = masterDetailRepository;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getMasterDetails(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.masterDetailRepository.find({
                company: context.company,
                lang: context.lang,
                class_code: context.class_code,
                master_code: context.master_code
            });
        });
    }
    /**
     * @param {?} context
     * @return {?}
     */
    getMasterDetail(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.masterDetailRepository.find({
                company: context.company,
                lang: context.lang,
                class_code: context.class_code,
                master_code: context.master_code,
                code: context.code
            });
        });
    }
};
MasterDetailService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, InjectRepository(SysMasterDetail)),
    tslib_1.__metadata("design:paramtypes", [Repository])
], MasterDetailService);
export { MasterDetailService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MasterDetailService.prototype.masterDetailRepository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLWRldGFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFpdC9haXQtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tYXN0ZXItZGV0YWlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7SUFHMUQsbUJBQW1CLFNBQW5CLG1CQUFtQjs7OztJQUM5QixZQUVtQixzQkFBbUQ7UUFBbkQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUE2QjtJQUNuRSxDQUFDOzs7OztJQUVFLGdCQUFnQixDQUFDLE9BQVk7O1lBQ2pDLE9BQU8sTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDO2dCQUM1QyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87Z0JBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO2dCQUM5QixXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7YUFDakMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBOzs7OztJQUVLLGVBQWUsQ0FBQyxPQUFZOztZQUNoQyxPQUFPLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQztnQkFDNUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7Z0JBQ2xCLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtnQkFDOUIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBO0NBQ0YsQ0FBQTtBQXhCWSxtQkFBbUI7SUFEL0IsVUFBVSxFQUFFO0lBR1IsbUJBQUEsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUE7NkNBQ08sVUFBVTtHQUgxQyxtQkFBbUIsQ0F3Qi9CO1NBeEJZLG1CQUFtQjs7Ozs7O0lBRTVCLHFEQUNvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBTeXNNYXN0ZXJEZXRhaWwgfSBmcm9tICcuLi9lbnRpdGllcy9zeXNfbWFzdGVyX2RldGFpbC5lbnRpdHknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTWFzdGVyRGV0YWlsU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0UmVwb3NpdG9yeShTeXNNYXN0ZXJEZXRhaWwpXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hc3RlckRldGFpbFJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8U3lzTWFzdGVyRGV0YWlsPlxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgZ2V0TWFzdGVyRGV0YWlscyhjb250ZXh0OiBhbnkpIHtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLm1hc3RlckRldGFpbFJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgbGFuZzogY29udGV4dC5sYW5nLFxyXG4gICAgICBjbGFzc19jb2RlOiBjb250ZXh0LmNsYXNzX2NvZGUsXHJcbiAgICAgIG1hc3Rlcl9jb2RlOiBjb250ZXh0Lm1hc3Rlcl9jb2RlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldE1hc3RlckRldGFpbChjb250ZXh0OiBhbnkpIHtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLm1hc3RlckRldGFpbFJlcG9zaXRvcnkuZmluZCh7XHJcbiAgICAgIGNvbXBhbnk6IGNvbnRleHQuY29tcGFueSxcclxuICAgICAgbGFuZzogY29udGV4dC5sYW5nLFxyXG4gICAgICBjbGFzc19jb2RlOiBjb250ZXh0LmNsYXNzX2NvZGUsXHJcbiAgICAgIG1hc3Rlcl9jb2RlOiBjb250ZXh0Lm1hc3Rlcl9jb2RlLFxyXG4gICAgICBjb2RlOiBjb250ZXh0LmNvZGVcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=